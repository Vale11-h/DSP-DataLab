# -*- coding: utf-8 -*-
"""Lab1Señales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zCD220DmAxq5ZL7TTwBRAYwQRnj0q3rK
"""

from google.colab import files
uploaded = files.upload()

!pip install wfdb matplotlib

import matplotlib.pyplot as plt
import wfdb
import numpy as np
import math
import scipy.stats as stats
from wfdb import rdrecord

archivo = 'session1_participant1_gesture10_trial1'
record = rdrecord(archivo)

signal_data = record.p_signal[:, 0]
valores = signal_data
tamano = record.sig_len

signal = record.p_signal[:, 0]
plt.figure(figsize=(12, 4))
plt.plot(signal, color='purple')
plt.title("EMG")
plt.xlabel("Tiempo (ms)")
plt.ylabel("Amplitud (mV)")
plt.grid(True)
plt.show()

#Media, desviación y coeficiente predeterminados
media = np.mean(valores)
desviacion_estandar = np.std(valores)
coeficiente_Des=desviacion_estandar/media
print(f"CÁLCULO 1 \n")

print(f"Media: {media:.7f}")
print(f"Desviacion estándar:  {desviacion_estandar:.4f}")
print(f"Coeficiente de variación : {coeficiente_Des:.4f} \n")

# Media
n = len(valores)
suma = 0
for valor in valores:
    suma += valor
media_cal = suma / n
print(f"CÁLCULO 2 \n")
print(f"Media 2: {media_cal:.7f}")


# Desviación estándar
suma_cuadrados = 0
for valor in valores:
    suma_cuadrados += (valor - media_cal) ** 2
varianza = suma_cuadrados / n
desviacion_estandar = varianza ** 0.5
print(f"Desviación estándar 2: {desviacion_estandar:.4f}")

# Coeficiente de Desviación
coeficiente_des = desviacion_estandar / media_cal
print(f"Coeficiente de Desviación 2: {coeficiente_des:.4f}")

# Cálculo manual del histograma usando for
def calcular_histograma(valores, bins=10):
    minimo = min(valores)
    maximo = max(valores)
    rango = (maximo - minimo) / bins
    conteos = [0] * bins
    for valor in valores:
        indice = int((valor - minimo) / rango)
        if indice == bins:
            indice -= 1
        conteos[indice] += 1
    limites = [minimo + i * rango for i in range(bins + 1)]
    return conteos, limites

bins = 10
conteos, limites = calcular_histograma(valores, bins)

fig, ax = plt.subplots()
ax.bar(range(len(conteos)), conteos, color='violet', edgecolor='black')
plt.title('HISTOGRAMA (Cálculo Manual)')
plt.xlabel('Intervalos')
plt.ylabel('Frecuencia')
plt.xticks(range(len(conteos)), [f"{limites[i]:.1f}" for i in range(len(conteos))], rotation=45)
plt.show()


#Histograma predeterminado
fig, ax = plt.subplots()
ax.hist(valores, bins=10, color="violet", edgecolor="black")
plt.title("HISTOGRAMA (Función Predefinida)")
plt.xlabel("Intervalos")
plt.ylabel("Frecuencia")
plt.show()

media = np.mean(valores)
desviacion_estandar = np.std(valores)

# Calcular Función de probabilidad manualmente
pdf = []
for valor in valores:
    coeficiente = 1 / (desviacion_estandar * np.sqrt(2 * np.pi))
    exponente = np.exp(-0.5 * ((valor - media) / desviacion_estandar) ** 2)
    probabilidad = coeficiente * exponente
    pdf.append(probabilidad)

plt.plot(valores, pdf, color='#33ffbe', marker='o', linestyle='dashed', linewidth=1)
plt.title("FUNCIÓN DE PROBABILIDAD (Cálculo Manual)")
plt.xlabel("Valores")
plt.ylabel("Probabilidad")
plt.grid(True, linestyle='--', alpha=0.5)
plt.show()

#Función de probabilidad predeterminada
pdf = stats.norm.pdf(valores, loc=np.mean(valores), scale=np.std(valores),)

plt.plot(valores, pdf,color='#33ffbe')
plt.xlabel('Valores')
plt.ylabel('Probabilidad')
plt.title('FUNCIÓN DE PROBABILIDAD (Función predefinida)')
plt.show()


#ruido gaussiano

N= record.sig_len
N= record.sig_len
x= np.random.randn(N)
Ruidonormalizado=(x*0.005)/max(valores)
plt.plot(Ruidonormalizado, '.-')


#Grafica


plt.plot(Ruidonormalizado, label='Ruido Gussiano', linestyle='-.', color='blue')
plt.plot(valores, label='Señal Original', color='red')
plt.title('Señal Original y Ruido Gaussiano')
plt.xlabel('Tiempo (ms)')
plt.ylabel('Amplitud (mV)')
plt.legend()
plt.show()

#Suma de señales
señal_con_ruido = valores + Ruidonormalizado
plt.plot(señal_con_ruido, '.-', label='Señal con Ruido', color='magenta')
plt.title('Señal con Ruido Gaussiano')
plt.xlabel('Tiempo (ms)')
plt.ylabel('Amplitud (mV)')
plt.legend()
plt.show()

#Suma de señales neg
señal_ruido = valores + x
plt.plot(señal_ruido, '.-', label='Señal con Ruido', color='#33e3ff')
plt.title('Señal con Ruido Gaussiano Amplificado ')
plt.xlabel('Tiempo (ms)')
plt.ylabel('Amplitud (mV)')
plt.legend()
plt.show()

#SNR Gaussiano
pot_val= ((np.sum(abs(valores)))**2)/n
pot_ruido = ((np.sum(abs(Ruidonormalizado)))**2)/N
pot_ruidoneg = ((np.sum(abs(x)))**2)/N

print("+ Potencia señal:", pot_val)
print("+ Potencia ruido Gaussiano:", pot_ruido)

SNR = 10* math.log10((pot_val/pot_ruido))
SNR_neg = 10* math.log10((pot_val/pot_ruidoneg))


#RUIDO DE IMPULSO
num_impulsos = 50
amplitud_impulso = 0.3
posiciones = np.random.choice(N, num_impulsos, replace=False)
ruido_impulso = np.zeros(N)
ruido_impulso[posiciones] = amplitud_impulso

Ruido_max=(ruido_impulso*1)/max(valores)
plt.plot(ruido_impulso, label='Ruido de Impulso', color='#ca94e7',  linestyle='-.')
plt.plot(valores, label='Señal Original', color='#e948ce')
plt.title('Señal Original y Ruido de Impulso')
plt.xlabel('Tiempo (ms)')
plt.ylabel('Amplitud (mV)')
plt.legend()
plt.show()

#Suma de señales
señal_con_impulso = valores + ruido_impulso
plt.plot(señal_con_impulso, '.-', color='magenta')
plt.title('Señal con Ruido de impulso')
plt.xlabel('Tiempo (ms)')
plt.ylabel('Amplitud (mV)')
plt.show()
4
#Suma de señales neg
señal_con_impulso_neg= valores + Ruido_max
plt.plot(señal_con_impulso_neg, '.-', color='#33e3ff')
plt.title('Señal con Ruido de Impulso Amplificado')
plt.xlabel('Tiempo (ms)')
plt.ylabel('Amplitud (mV)')
plt.show()

#SNR Impulso
pot_ruido_imp= ((np.sum(abs(ruido_impulso)))**2)/N
pot_ruid_neg=  ((np.sum(abs(Ruido_max)))**2)/N
print("+ Potencia señal:", pot_val)
print("+ Potencia ruido impulso:", pot_ruido_imp)


SNR2 = 10* math.log10((pot_val/pot_ruido_imp))
SNR2_neg = 10* math.log10((pot_val/pot_ruid_neg))

#Senal de ruido artefacto
frecuencia_artefacto = 0.02
amplitud_onda = 0.03
t = np.arange(N)
artefacto_onda = amplitud_onda * np.sin(2 * np.pi * frecuencia_artefacto * t)
probabilidad_mostrar = 0.81
mask = np.random.rand(N) > probabilidad_mostrar
artefacto_intervalos = np.where(mask, artefacto_onda, 0)

ruido_art_max=(artefacto_intervalos*5)/max(valores)

plt.plot(artefacto_intervalos, label='Artefacto Periódico', color='#fa6875', linestyle='-.')
plt.plot(valores, label='Señal Original',color='#ab68fa')
plt.title('Señal Original y Señal con Artefacto')
plt.xlabel('Tiempo (ms)')
plt.ylabel('Amplitud (mV)')
plt.legend()
plt.show()

# Suma señales
señal_con_artefacto = valores + artefacto_intervalos

plt.plot(señal_con_artefacto, label='Señal con Artefacto', color='magenta')
plt.title('Señal con Ruido de Artefacto')
plt.xlabel('Tiempo (ms)')
plt.ylabel('Amplitud (mV)')
plt.legend()
plt.show()

# Suma señales
señal_con_artefacto_neg = valores + ruido_art_max

plt.plot(señal_con_artefacto_neg, label='Señal con Artefacto', color='#33e3ff')
plt.title('Señal con Ruido de Artefacto Amplificado')
plt.xlabel('Tiempo (ms)')
plt.ylabel('Amplitud (mV)')
plt.legend()
plt.show()


#SNR Artefacto
pot_val = ((np.sum(abs(valores)))**2) / n
pot_artefacto = ((np.sum(abs(artefacto_intervalos)))**2) / n
pot_artefacto_neg = ((np.sum(abs(ruido_art_max)))**2) / n

print("+ Potencia señal:", pot_val)

print("+ Potencia ruido  Artefacto: ",pot_artefacto )
SNR3 = 10 * math.log10(pot_val / pot_artefacto)
SNR3_neg = 10 * math.log10(pot_val / pot_artefacto_neg)

print("\n SNR Positivo: \n")
print("SNR Gaussiano: ", SNR)
print("SNR Impulso:", SNR2)
print("SNR Artefacto: ", SNR3 )

print("\n SNR Negativo: \n")
print("SNR Gaussiano:", SNR_neg)
print("SNR Impulso:", SNR2_neg)
print("SNR Artefacto:", SNR3_neg)

